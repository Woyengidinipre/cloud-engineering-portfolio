name: Build and Deploy

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: eu-north-1
  AWS_ACCOUNT_ID: 861276118104
  ECR_REGISTRY_URL: 861276118104.dkr.ecr.eu-north-1.amazonaws.com

jobs:
  # Test job - runs on all branches
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: testdb
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
        ports:
          - 3306:3306
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'
      
      - name: Install backend dependencies
        working-directory: ./backend
        run: npm install
      
      - name: Lint backend
        working-directory: ./backend
        run: npm run lint || true
      
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm install
      
      - name: Build frontend
        working-directory: ./frontend
        run: npm run build
      
      - name: Run frontend tests
        working-directory: ./frontend
        run: npm test -- --watchAll=false || true

  # Build and push job - only on main branch
  build:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Build and push backend image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        working-directory: ./backend
        run: |
          docker build -t $REGISTRY/three-tier-backend:latest .
          docker tag $REGISTRY/three-tier-backend:latest $REGISTRY/three-tier-backend:$IMAGE_TAG
          docker push $REGISTRY/three-tier-backend:latest
          docker push $REGISTRY/three-tier-backend:$IMAGE_TAG
      
      - name: Build and push frontend image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        working-directory: ./frontend
        run: |
          docker build -t $REGISTRY/three-tier-frontend:latest .
          docker tag $REGISTRY/three-tier-frontend:latest $REGISTRY/three-tier-frontend:$IMAGE_TAG
          docker push $REGISTRY/three-tier-frontend:latest
          docker push $REGISTRY/three-tier-frontend:$IMAGE_TAG

  # Deploy job - only on main branch after build succeeds
  deploy:
    name: Deploy to ECS
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Update ECS service
        run: |
          aws ecs update-service \
            --cluster three-tier-app-prod-cluster \
            --service three-tier-app-backend-service \
            --force-new-deployment \
            --region ${{ env.AWS_REGION }}
      
      - name: Wait for ECS service to stabilize
        run: |
          aws ecs wait services-stable \
            --cluster three-tier-app-prod-cluster \
            --services three-tier-app-backend-service \
            --region ${{ env.AWS_REGION }}
      
      - name: Notify deployment success
        run: |
          echo "✅ Deployment successful!"
          echo "Service: three-tier-app-backend-service"
          echo "Cluster: three-tier-app-prod-cluster"
          echo "Region: ${{ env.AWS_REGION }}"
